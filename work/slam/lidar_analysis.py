angles = [171.578125, 172.96875, 174.21875, 175.4375, 176.71875, 179.8125, 181.09375, 182.328125, 184.125, 185.375, 186.625, 187.890625, 189.140625, 190.375, 191.609375, 192.84375, 194.0625, 195.3125, 196.46875, 197.6875, 198.921875, 200.1875, 201.421875, 202.734375, 204.015625, 205.25, 206.53125, 207.765625, 209.03125, 210.296875, 211.546875, 212.84375, 214.109375, 215.4375, 216.75, 218.0, 219.28125, 220.53125, 224.359375, 225.8125, 227.0, 228.453125, 229.65625, 230.859375, 232.125, 233.375, 234.75, 237.234375, 238.46875, 239.765625, 241.109375, 242.359375, 243.5625, 244.921875, 246.09375, 247.46875, 248.6875, 249.9375, 251.140625, 252.4375, 253.640625, 254.921875, 256.234375, 257.484375, 258.78125, 259.953125, 261.1875, 262.453125, 263.734375, 265.03125, 266.171875, 267.421875, 268.8125, 269.9375, 271.171875, 272.4375, 273.703125, 274.921875, 276.296875, 277.484375, 278.6875, 280.0, 281.28125, 282.453125, 283.59375, 284.96875, 286.125, 287.4375, 288.6875, 289.875, 317.40625, 318.125, 321.4375, 322.90625, 324.671875, 325.109375, 326.140625, 328.390625, 329.953125, 331.90625, 341.4375, 342.890625, 344.046875, 346.6875, 347.921875, 348.40625, 349.765625, 351.015625, 352.484375, 356.609375, 357.546875, 0.359375, 1.59375, 1.953125, 3.609375, 4.75, 6.25, 7.3125, 12.734375, 12.21875, 15.21875, 27.25, 28.21875, 29.671875, 30.515625, 31.65625, 30.875, 35.421875, 37.546875, 38.875, 61.515625, 62.703125, 63.953125, 65.140625, 66.375, 67.578125, 68.78125, 70.015625, 71.296875, 72.53125, 75.125, 76.390625, 79.828125, 82.125, 83.359375, 84.578125, 85.828125, 87.109375, 88.3125, 93.46875, 94.609375, 95.828125, 98.3125, 99.5625, 100.796875, 103.265625, 104.5, 105.75, 106.984375, 108.203125, 109.46875, 113.203125, 114.4375, 116.90625, 118.140625, 120.671875, 122.0625, 123.1875, 124.4375, 125.703125, 126.9375, 128.1875, 129.609375, 130.6875, 131.9375, 133.1875, 134.4375, 135.703125, 136.953125, 138.1875, 139.4375, 140.703125, 141.953125, 143.234375, 144.484375, 145.75, 147.0, 148.21875, 149.484375, 150.734375, 151.984375, 153.21875, 154.46875, 155.734375, 156.953125, 158.21875, 159.46875, 160.734375, 164.453125, 165.703125, 166.921875, 168.328125, 169.546875]

distances = [2551.75, 2120.25, 2134.5, 2118.25, 2103.25, 567.25, 568.0, 569.0, 2084.25, 2087.5, 2088.25, 2087.75, 2086.5, 2091.0, 2092.25, 2098.0, 2131.25, 2096.0, 2510.0, 2529.5, 2553.5, 2560.0, 2448.0, 2298.5, 2173.25, 2117.0, 2033.75, 2045.75, 2005.25, 1915.75, 1828.75, 1748.25, 1683.5, 1619.25, 1563.25, 1508.0, 1460.0, 1416.75, 1293.25, 1114.25, 1105.5, 959.25, 1054.75, 1032.0, 1012.0, 990.0, 925.75, 936.0, 922.25, 907.5, 895.5, 881.0, 869.25, 858.25, 847.5, 838.25, 829.5, 821.0, 813.25, 806.5, 799.0, 791.0, 785.75, 780.25, 774.0, 770.75, 765.25, 761.25, 759.5, 757.5, 754.75, 753.0, 749.25, 748.5, 748.25, 745.75, 746.75, 747.25, 746.5, 747.75, 749.25, 751.25, 742.75, 757.0, 758.0, 760.0, 764.25, 767.5, 777.5, 788.5, 152.25, 211.5, 237.25, 244.25, 251.5, 259.25, 264.5, 260.5, 254.0, 247.25, 236.25, 234.0, 232.25, 230.75, 233.5, 424.25, 419.25, 415.5, 413.75, 224.75, 224.5, 224.5, 225.0, 225.25, 410.5, 409.0, 409.0, 410.25, 230.75, 232.5, 236.75, 256.0, 259.0, 262.25, 265.75, 268.0, 399.0, 254.0, 237.25, 219.75, 2021.5, 2084.25, 2175.0, 2277.75, 2368.25, 2465.25, 2575.5, 2710.0, 2877.25, 3032.25, 809.75, 802.75, 4779.25, 1085.75, 1073.75, 1066.75, 1063.0, 1066.75, 1089.25, 5581.75, 5628.5, 5694.25, 5634.5, 5646.25, 5712.25, 5694.25, 5749.0, 5767.5, 5936.25, 5992.5, 5611.0, 5301.0, 5327.25, 5440.5, 5524.5, 5178.5, 3453.75, 4762.25, 4559.5, 4479.25, 4339.5, 4204.75, 2738.25, 3950.0, 3875.5, 3765.0, 3665.5, 3587.75, 3502.25, 3436.5, 3346.25, 3307.75, 3244.25, 3190.5, 3131.5, 3097.0, 3030.5, 3001.75, 2944.75, 2916.0, 2893.0, 2850.5, 2817.75, 2797.0, 2764.25, 2730.75, 2717.25, 2689.5, 2621.5, 2613.5, 2587.25, 2124.0, 2118.25]


#%% Let's analyse those arrays a bit more into details
import pandas as pd 
df= pd.DataFrame({"angles": angles, "distances": distances})
df.plot()

#%% find the first positive angles not seing the robot ! 
threshold = 600
n_points = 10

number_of_valid_points = 0
for i, distance in enumerate(distances):
    if distance > threshold:
        number_of_valid_points += 1 
    if number_of_valid_points >= n_points:
        break 
i1 = i - number_of_valid_points + 2
print(i1)

#%% find the last index angles
number_of_valid_points = 0
for i, distance in enumerate(distances[-1::-1]):
    if distance > threshold:
        number_of_valid_points += 1 
    if number_of_valid_points >= n_points:
        break 
i2 = len(distances) - (i - number_of_valid_points) - 1
print(i2)

#%% make a new plot to make sure it's correct
df[i1:i2].plot()

#%% so let's just make a function which does this

def get_valid_lidar_range(distances, angles, threshold = 600, n_points = 6):
    """
    Given the 'distances' array of LIDAR, it returns the indexes 'i1' and 'i2' that must be taken into account.
    This function will not be called during final deployment, just is used for determining 'i1' and 'i2'.
    Those values may change depending on the 3D layout
    """

    # 1. First, check array sizes
    if len(distances) != len(angles):
        print("ERROR ARRAY SIZES: distances and angles must have the same size")
        return (0,len(distances)-1)

    # find the first index
    number_of_valid_points = 0
    for i, distance in enumerate(distances):
        if distance > threshold:
            number_of_valid_points += 1 
        if number_of_valid_points >= n_points:
            break 
    i1 = i - number_of_valid_points + 2

    # find the last index 
    number_of_valid_points = 0
    for i, distance in enumerate(distances[-1::-1]):
        if distance > threshold:
            number_of_valid_points += 1 
        if number_of_valid_points >= n_points:
            break 
    i2 = len(distances) - (i - number_of_valid_points) - 1

    return (i1, i2)



















