angles0 = [359.171875, 353.921875, 6.0625, 7.453125, 8.734375, 9.671875, 20.59375, 21.78125, 22.96875, 28.90625, 29.34375, 36.75, 37.953125, 39.140625, 40.328125, 41.53125, 42.78125, 45.671875, 46.84375, 47.296875, 48.75, 51.625, 52.828125, 54.015625, 56.40625, 57.609375, 58.796875, 59.984375, 61.1875, 62.375, 63.578125, 65.453125, 65.953125, 67.25, 68.4375, 70.390625, 71.53125, 72.03125, 74.109375, 75.53125, 75.625, 76.828125, 83.96875, 85.125, 86.484375, 87.546875, 88.71875, 89.984375, 91.171875, 92.375, 93.578125, 94.78125, 95.96875, 97.1875, 98.375, 99.546875, 100.8125, 102.0, 103.21875, 104.4375, 105.65625, 106.875, 108.0, 109.40625, 110.609375, 111.859375, 112.84375, 114.046875, 115.25, 116.546875, 117.703125, 118.890625, 120.0625, 121.375, 122.484375, 123.890625, 125.21875, 126.484375, 127.640625, 128.953125, 130.203125, 131.359375, 132.65625, 133.703125, 134.953125, 136.09375, 137.171875, 138.296875, 139.515625, 140.625, 141.84375, 142.96875, 144.09375, 145.203125, 146.390625, 147.625, 148.8125, 150.0, 151.140625, 152.390625, 153.578125, 154.765625, 155.90625, 157.125, 158.3125, 159.515625, 160.65625, 161.84375, 163.015625, 164.25, 165.4375, 166.59375, 167.75, 168.953125, 170.15625, 171.28125, 172.484375, 173.65625, 174.8125, 176.0625, 177.25, 178.390625, 179.546875, 180.703125, 181.875, 183.046875, 184.203125, 185.40625, 186.53125, 187.75, 188.890625, 190.078125, 192.421875, 193.609375, 194.78125, 195.953125, 197.109375, 198.28125, 199.46875, 200.625, 201.78125, 203.921875, 205.125, 209.03125, 217.28125, 218.453125, 219.65625, 220.890625, 222.09375, 223.28125, 225.671875, 226.9375, 228.109375, 229.34375, 230.546875, 231.734375, 232.9375, 234.125, 235.328125, 236.546875, 237.734375, 238.953125, 241.921875, 243.09375, 244.390625, 245.515625, 246.71875, 247.890625, 249.140625, 250.3125, 253.375, 254.546875, 255.734375, 256.96875, 258.140625, 259.34375, 260.5625, 261.71875, 262.9375, 264.140625, 265.328125, 266.53125, 267.75, 268.90625, 270.140625, 271.3125, 272.5, 273.71875, 274.765625, 275.96875, 285.9375, 287.125, 290.6875, 291.875, 293.0625, 303.265625, 304.453125, 305.640625, 306.90625, 308.09375, 316.4375, 316.875, 318.8125, 319.515625, 321.203125, 322.640625, 323.59375, 324.78125, 325.96875, 327.171875, 328.359375, 329.5625, 331.296875, 332.484375, 333.671875, 334.859375, 336.046875, 344.40625, 346.796875, 347.21875, 348.234375, 352.78125, 353.96875, 355.15625, 356.34375, 357.546875]

distances0 = [153.0, 2248.25, 327.0, 330.0, 338.0, 337.25, 165.75, 165.5, 167.0, 142.75, 142.0, 192.5, 195.5, 198.5, 202.0, 205.5, 208.5, 137.75, 139.75, 189.25, 185.0, 143.0, 143.75, 145.0, 165.5, 163.75, 161.75, 159.5, 157.75, 156.0, 154.25, 152.75, 151.25, 149.75, 148.75, 147.75, 147.0, 146.25, 145.75, 145.5, 145.25, 144.75, 1430.75, 1408.5, 1296.75, 1402.5, 1402.0, 1403.25, 1397.0, 1378.25, 1391.25, 1359.5, 1358.0, 1365.25, 1346.75, 1327.5, 1311.0, 1288.0, 1274.25, 1263.25, 1252.0, 1231.5, 1226.0, 1036.75, 1033.25, 1033.0, 1158.75, 1155.5, 1150.5, 1079.25, 1124.0, 1115.25, 1112.5, 1100.25, 1099.75, 943.0, 915.5, 886.75, 862.0, 838.75, 819.5, 799.75, 803.25, 820.5, 839.5, 858.75, 881.75, 908.0, 930.0, 957.0, 984.25, 1017.25, 1085.75, 1091.25, 1100.25, 1108.5, 1119.75, 1124.25, 1132.25, 1142.75, 1149.75, 1154.5, 1167.25, 1181.75, 1193.0, 1202.75, 1217.5, 1232.5, 1248.5, 1264.0, 1282.75, 1305.0, 1326.5, 1346.25, 1367.5, 1392.0, 1411.25, 1445.0, 1468.25, 1496.75, 1531.5, 1566.0, 1605.25, 1637.25, 1678.25, 1720.0, 1762.5, 1805.5, 1860.75, 1914.75, 1971.25, 2022.75, 2156.0, 2253.75, 2345.0, 2430.75, 2542.0, 2647.25, 2756.5, 2933.0, 3096.25, 1007.0, 1046.25, 2686.25, 3458.0, 3401.25, 3325.0, 3242.25, 3120.75, 3104.0, 2978.25, 2912.75, 2875.0, 2809.75, 2754.5, 2720.75, 2679.25, 2639.75, 2599.5, 2565.0, 2514.25, 2491.5, 1253.5, 1235.25, 1211.25, 1206.0, 1219.0, 1226.0, 1230.5, 1259.5, 2226.75, 2217.75, 2192.5, 2192.75, 2178.75, 2170.75, 2165.5, 2163.0, 2157.75, 2147.75, 2145.75, 2133.75, 2133.25, 2131.75, 2137.0, 2139.25, 2133.0, 2143.0, 2145.75, 2159.75, 155.5, 152.75, 147.75, 141.5, 159.75, 177.75, 180.25, 183.0, 185.25, 186.0, 204.75, 203.0, 198.75, 192.5, 187.25, 186.25, 185.25, 182.0, 179.5, 177.25, 174.75, 172.5, 170.5, 168.0, 168.5, 138.25, 137.75, 156.75, 153.75, 301.0, 296.0, 152.0, 151.75, 151.5, 151.0, 151.25]


angles1 = [351.8125,353.109375,354.34375,355.625,356.875,358.140625,0.703125,1.9375,3.203125,4.53125,5.75,8.25,9.515625,10.78125,11.984375,13.265625,14.53125,15.78125,17.03125,18.296875,19.578125,20.828125,22.078125,25.09375,26.359375,27.6875,28.34375,29.609375,30.828125,32.140625,33.375,34.578125,35.953125,37.234375,38.890625,40.078125,42.453125,43.53125,44.828125,46.078125,47.328125,48.625,49.90625,51.15625,52.421875,53.703125,54.921875,56.234375,57.453125,58.71875,61.15625,66.375,67.625,68.84375,70.15625,71.421875,72.640625,73.9375,80.203125,86.4375,87.671875,88.984375,90.1875,91.4375,93.9375,95.21875,96.453125,97.703125,98.96875,100.1875,101.453125,102.703125,103.953125,105.203125,106.46875,107.6875,108.890625,110.1875,111.421875,112.640625,113.921875,115.6875,116.984375,118.234375,118.875,120.125,121.359375,131.109375,132.359375,133.625,134.890625,136.140625,137.390625,137.3125,139.921875,140.21875,142.4375,143.6875,143.421875,150.484375,151.546875,153.375,165.078125,167.59375,168.859375,182.6875,185.203125,186.9375,185.96875,188.078125,192.71875,192.59375,193.671875,194.640625,196.953125,199.0,198.1875,200.109375,201.90625,204.875,205.578125,205.84375,208.453125,210.109375,211.5,211.578125,215.390625,216.640625,217.65625,219.109375,221.671875,222.9375,224.203125,224.671875,226.71875,227.96875,229.234375,232.265625,233.515625,246.125,247.40625,248.65625,249.90625,251.171875,252.4375,253.703125,254.953125,258.734375,259.953125,262.515625,263.734375,265.015625,266.328125,267.5,268.78125,270.03125,271.3125,272.546875,273.8125,275.015625,276.234375,277.46875,278.734375,280.0,281.234375,282.46875,284.203125,285.375,288.703125,289.984375,291.203125,292.65625,296.40625,297.8125,299.109375,300.28125,302.625,304.09375,310.171875,311.421875,312.640625,313.875,316.421875,317.828125,318.921875,321.46875,322.703125,324.25,325.515625,326.8125,328.078125,329.296875,330.53125,331.75,332.96875,334.125,335.390625,336.671875,337.953125,339.203125,340.46875,341.734375,343.015625,344.28125,345.5625,346.734375,348.046875,349.296875,350.53125]
distances1 = [2002.0,1970.0,1949.25,1927.75,1907.5,1886.25,1842.25,1822.0,1812.25,1798.25,1791.0,1769.75,1762.0,1758.25,1750.0,1743.75,1731.75,1716.75,1716.0,1713.75,1714.75,1720.75,1714.0,1055.0,1025.75,1035.25,1733.75,1729.5,1735.75,1654.75,1734.5,1747.5,1747.5,1756.75,1200.0,1203.0,1453.0,1687.25,1717.75,1706.75,1694.0,1628.25,1626.0,1657.0,1646.0,1634.75,1628.75,1624.25,1614.75,1604.0,727.0,1593.75,1594.5,1593.0,1594.0,1593.5,1595.75,1602.0,434.75,1683.5,1701.5,1711.25,1754.5,1738.0,1781.0,1794.75,1800.5,1797.0,1857.75,1896.5,1916.5,1949.25,1979.5,2014.75,2045.25,2089.0,2122.5,2169.75,2208.5,2262.0,2316.75,1197.75,1198.5,1235.5,2569.25,2620.25,2706.75,190.75,194.25,198.25,202.5,206.5,211.5,216.5,221.5,227.25,232.75,239.0,246.0,255.25,251.25,255.25,232.75,191.0,186.25,231.0,229.75,148.0,230.5,230.75,231.75,233.0,234.75,236.25,237.5,240.0,244.0,242.0,250.5,250.5,255.0,254.5,261.25,264.25,267.5,274.75,190.25,192.75,228.0,223.5,216.5,211.0,204.75,199.75,195.0,190.25,186.25,168.5,161.0,1956.25,1940.75,1947.75,1944.0,1960.25,1953.5,1957.75,1966.25,1988.0,2028.5,2017.75,2027.0,2045.0,1970.0,2072.25,2092.25,2113.25,2106.5,2103.75,2168.5,2199.5,2228.25,2257.25,2277.25,2321.75,2351.25,2391.5,1419.0,1427.75,2608.0,2657.25,2720.0,1980.25,2085.75,1757.5,1772.75,1804.75,2462.5,1868.25,2491.5,2603.0,2701.5,2888.5,2833.5,2208.0,2797.0,2753.75,2745.75,1861.5,1791.25,1763.5,1765.5,1785.0,1803.5,1839.0,1934.75,2456.75,2379.75,2345.0,2297.5,2255.75,2206.75,2170.75,2133.25,2101.25,2063.75,2035.0,2016.5,1982.75,1951.75]

#%% Let's analyse those arrays a bit more into details
import pandas as pd 
df= pd.DataFrame({"angles": angles1, "distances": distances1})
df.plot()

#%% find the first positive angles not seing the robot ! 
threshold = 600
n_points = 10

number_of_valid_points = 0
for i, distance in enumerate(distances):
    if distance > threshold:
        number_of_valid_points += 1 
    if number_of_valid_points >= n_points:
        break 
i1 = i - number_of_valid_points + 2
print(i1)

#%% find the last index angles
number_of_valid_points = 0
for i, distance in enumerate(distances[-1::-1]):
    if distance > threshold:
        number_of_valid_points += 1 
    if number_of_valid_points >= n_points:
        break 
i2 = len(distances) - (i - number_of_valid_points) - 1
print(i2)

#%% make a new plot to make sure it's correct
df[i1:i2].plot()

#%% so let's just make a function which does this

def get_valid_lidar_range(distances, angles, threshold = 600, n_points = 6):
    """
    Given the 'distances' array of LIDAR, it returns the indexes 'i1' and 'i2' that must be taken into account.
    This function will not be called during final deployment, just is used for determining 'i1' and 'i2'.
    Those values may change depending on the 3D layout
    """

    # 1. First, check array sizes
    if len(distances) != len(angles):
        print("ERROR ARRAY SIZES: distances and angles must have the same size")
        return (0,len(distances)-1)

    # find the first index
    number_of_valid_points = 0
    for i, distance in enumerate(distances):
        if distance > threshold:
            number_of_valid_points += 1 
        if number_of_valid_points >= n_points:
            break 
    i1 = i - number_of_valid_points + 2

    # find the last index 
    number_of_valid_points = 0
    for i, distance in enumerate(distances[-1::-1]):
        if distance > threshold:
            number_of_valid_points += 1 
        if number_of_valid_points >= n_points:
            break 
    i2 = len(distances) - (i - number_of_valid_points) - 1

    return (i1, i2)



















